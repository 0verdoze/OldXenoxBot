// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MetinHostGuest.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_MetinHostGuest_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_MetinHostGuest_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_MetinHostGuest_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_MetinHostGuest_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_MetinHostGuest_2eproto;
namespace MetinGuestHost {
class BotInstance_;
class BotInstance_DefaultTypeInternal;
extern BotInstance_DefaultTypeInternal _BotInstance__default_instance_;
class BotStatusMessage;
class BotStatusMessageDefaultTypeInternal;
extern BotStatusMessageDefaultTypeInternal _BotStatusMessage_default_instance_;
class BotStatus_;
class BotStatus_DefaultTypeInternal;
extern BotStatus_DefaultTypeInternal _BotStatus__default_instance_;
class PrivateMessage;
class PrivateMessageDefaultTypeInternal;
extern PrivateMessageDefaultTypeInternal _PrivateMessage_default_instance_;
class RegisterBotInstanceMessage;
class RegisterBotInstanceMessageDefaultTypeInternal;
extern RegisterBotInstanceMessageDefaultTypeInternal _RegisterBotInstanceMessage_default_instance_;
class RegisterVMInstanceMessage;
class RegisterVMInstanceMessageDefaultTypeInternal;
extern RegisterVMInstanceMessageDefaultTypeInternal _RegisterVMInstanceMessage_default_instance_;
class UnregisterBotInstanceMessage;
class UnregisterBotInstanceMessageDefaultTypeInternal;
extern UnregisterBotInstanceMessageDefaultTypeInternal _UnregisterBotInstanceMessage_default_instance_;
}  // namespace MetinGuestHost
PROTOBUF_NAMESPACE_OPEN
template<> ::MetinGuestHost::BotInstance_* Arena::CreateMaybeMessage<::MetinGuestHost::BotInstance_>(Arena*);
template<> ::MetinGuestHost::BotStatusMessage* Arena::CreateMaybeMessage<::MetinGuestHost::BotStatusMessage>(Arena*);
template<> ::MetinGuestHost::BotStatus_* Arena::CreateMaybeMessage<::MetinGuestHost::BotStatus_>(Arena*);
template<> ::MetinGuestHost::PrivateMessage* Arena::CreateMaybeMessage<::MetinGuestHost::PrivateMessage>(Arena*);
template<> ::MetinGuestHost::RegisterBotInstanceMessage* Arena::CreateMaybeMessage<::MetinGuestHost::RegisterBotInstanceMessage>(Arena*);
template<> ::MetinGuestHost::RegisterVMInstanceMessage* Arena::CreateMaybeMessage<::MetinGuestHost::RegisterVMInstanceMessage>(Arena*);
template<> ::MetinGuestHost::UnregisterBotInstanceMessage* Arena::CreateMaybeMessage<::MetinGuestHost::UnregisterBotInstanceMessage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace MetinGuestHost {

// ===================================================================

class PrivateMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MetinGuestHost.PrivateMessage) */ {
 public:
  inline PrivateMessage() : PrivateMessage(nullptr) {}
  virtual ~PrivateMessage();

  PrivateMessage(const PrivateMessage& from);
  PrivateMessage(PrivateMessage&& from) noexcept
    : PrivateMessage() {
    *this = ::std::move(from);
  }

  inline PrivateMessage& operator=(const PrivateMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline PrivateMessage& operator=(PrivateMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PrivateMessage& default_instance();

  static inline const PrivateMessage* internal_default_instance() {
    return reinterpret_cast<const PrivateMessage*>(
               &_PrivateMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PrivateMessage& a, PrivateMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(PrivateMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PrivateMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PrivateMessage* New() const final {
    return CreateMaybeMessage<PrivateMessage>(nullptr);
  }

  PrivateMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PrivateMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PrivateMessage& from);
  void MergeFrom(const PrivateMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PrivateMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MetinGuestHost.PrivateMessage";
  }
  protected:
  explicit PrivateMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MetinHostGuest_2eproto);
    return ::descriptor_table_MetinHostGuest_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetNicknameFieldNumber = 2,
    kTextMessageFieldNumber = 3,
    kBotIdFieldNumber = 1,
  };
  // bytes targetNickname = 2;
  void clear_targetnickname();
  const std::string& targetnickname() const;
  void set_targetnickname(const std::string& value);
  void set_targetnickname(std::string&& value);
  void set_targetnickname(const char* value);
  void set_targetnickname(const void* value, size_t size);
  std::string* mutable_targetnickname();
  std::string* release_targetnickname();
  void set_allocated_targetnickname(std::string* targetnickname);
  private:
  const std::string& _internal_targetnickname() const;
  void _internal_set_targetnickname(const std::string& value);
  std::string* _internal_mutable_targetnickname();
  public:

  // bytes textMessage = 3;
  void clear_textmessage();
  const std::string& textmessage() const;
  void set_textmessage(const std::string& value);
  void set_textmessage(std::string&& value);
  void set_textmessage(const char* value);
  void set_textmessage(const void* value, size_t size);
  std::string* mutable_textmessage();
  std::string* release_textmessage();
  void set_allocated_textmessage(std::string* textmessage);
  private:
  const std::string& _internal_textmessage() const;
  void _internal_set_textmessage(const std::string& value);
  std::string* _internal_mutable_textmessage();
  public:

  // uint32 botId = 1;
  void clear_botid();
  ::PROTOBUF_NAMESPACE_ID::uint32 botid() const;
  void set_botid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_botid() const;
  void _internal_set_botid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:MetinGuestHost.PrivateMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr targetnickname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr textmessage_;
  ::PROTOBUF_NAMESPACE_ID::uint32 botid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MetinHostGuest_2eproto;
};
// -------------------------------------------------------------------

class BotStatus_ PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MetinGuestHost.BotStatus_) */ {
 public:
  inline BotStatus_() : BotStatus_(nullptr) {}
  virtual ~BotStatus_();

  BotStatus_(const BotStatus_& from);
  BotStatus_(BotStatus_&& from) noexcept
    : BotStatus_() {
    *this = ::std::move(from);
  }

  inline BotStatus_& operator=(const BotStatus_& from) {
    CopyFrom(from);
    return *this;
  }
  inline BotStatus_& operator=(BotStatus_&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BotStatus_& default_instance();

  static inline const BotStatus_* internal_default_instance() {
    return reinterpret_cast<const BotStatus_*>(
               &_BotStatus__default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(BotStatus_& a, BotStatus_& b) {
    a.Swap(&b);
  }
  inline void Swap(BotStatus_* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BotStatus_* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BotStatus_* New() const final {
    return CreateMaybeMessage<BotStatus_>(nullptr);
  }

  BotStatus_* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BotStatus_>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BotStatus_& from);
  void MergeFrom(const BotStatus_& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BotStatus_* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MetinGuestHost.BotStatus_";
  }
  protected:
  explicit BotStatus_(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MetinHostGuest_2eproto);
    return ::descriptor_table_MetinHostGuest_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBotIdFieldNumber = 1,
    kBotStatusFieldNumber = 2,
  };
  // uint32 botId = 1;
  void clear_botid();
  ::PROTOBUF_NAMESPACE_ID::uint32 botid() const;
  void set_botid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_botid() const;
  void _internal_set_botid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 botStatus = 2;
  void clear_botstatus();
  ::PROTOBUF_NAMESPACE_ID::uint32 botstatus() const;
  void set_botstatus(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_botstatus() const;
  void _internal_set_botstatus(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:MetinGuestHost.BotStatus_)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 botid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 botstatus_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MetinHostGuest_2eproto;
};
// -------------------------------------------------------------------

class BotInstance_ PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MetinGuestHost.BotInstance_) */ {
 public:
  inline BotInstance_() : BotInstance_(nullptr) {}
  virtual ~BotInstance_();

  BotInstance_(const BotInstance_& from);
  BotInstance_(BotInstance_&& from) noexcept
    : BotInstance_() {
    *this = ::std::move(from);
  }

  inline BotInstance_& operator=(const BotInstance_& from) {
    CopyFrom(from);
    return *this;
  }
  inline BotInstance_& operator=(BotInstance_&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BotInstance_& default_instance();

  static inline const BotInstance_* internal_default_instance() {
    return reinterpret_cast<const BotInstance_*>(
               &_BotInstance__default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(BotInstance_& a, BotInstance_& b) {
    a.Swap(&b);
  }
  inline void Swap(BotInstance_* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BotInstance_* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BotInstance_* New() const final {
    return CreateMaybeMessage<BotInstance_>(nullptr);
  }

  BotInstance_* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BotInstance_>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BotInstance_& from);
  void MergeFrom(const BotInstance_& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BotInstance_* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MetinGuestHost.BotInstance_";
  }
  protected:
  explicit BotInstance_(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MetinHostGuest_2eproto);
    return ::descriptor_table_MetinHostGuest_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBotNameFieldNumber = 2,
    kBotIdFieldNumber = 1,
  };
  // string botName = 2;
  void clear_botname();
  const std::string& botname() const;
  void set_botname(const std::string& value);
  void set_botname(std::string&& value);
  void set_botname(const char* value);
  void set_botname(const char* value, size_t size);
  std::string* mutable_botname();
  std::string* release_botname();
  void set_allocated_botname(std::string* botname);
  private:
  const std::string& _internal_botname() const;
  void _internal_set_botname(const std::string& value);
  std::string* _internal_mutable_botname();
  public:

  // uint32 botId = 1;
  void clear_botid();
  ::PROTOBUF_NAMESPACE_ID::uint32 botid() const;
  void set_botid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_botid() const;
  void _internal_set_botid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:MetinGuestHost.BotInstance_)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr botname_;
  ::PROTOBUF_NAMESPACE_ID::uint32 botid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MetinHostGuest_2eproto;
};
// -------------------------------------------------------------------

class BotStatusMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MetinGuestHost.BotStatusMessage) */ {
 public:
  inline BotStatusMessage() : BotStatusMessage(nullptr) {}
  virtual ~BotStatusMessage();

  BotStatusMessage(const BotStatusMessage& from);
  BotStatusMessage(BotStatusMessage&& from) noexcept
    : BotStatusMessage() {
    *this = ::std::move(from);
  }

  inline BotStatusMessage& operator=(const BotStatusMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline BotStatusMessage& operator=(BotStatusMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BotStatusMessage& default_instance();

  static inline const BotStatusMessage* internal_default_instance() {
    return reinterpret_cast<const BotStatusMessage*>(
               &_BotStatusMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(BotStatusMessage& a, BotStatusMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(BotStatusMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BotStatusMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BotStatusMessage* New() const final {
    return CreateMaybeMessage<BotStatusMessage>(nullptr);
  }

  BotStatusMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BotStatusMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BotStatusMessage& from);
  void MergeFrom(const BotStatusMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BotStatusMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MetinGuestHost.BotStatusMessage";
  }
  protected:
  explicit BotStatusMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MetinHostGuest_2eproto);
    return ::descriptor_table_MetinHostGuest_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // repeated .MetinGuestHost.BotStatus_ status = 1;
  int status_size() const;
  private:
  int _internal_status_size() const;
  public:
  void clear_status();
  ::MetinGuestHost::BotStatus_* mutable_status(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MetinGuestHost::BotStatus_ >*
      mutable_status();
  private:
  const ::MetinGuestHost::BotStatus_& _internal_status(int index) const;
  ::MetinGuestHost::BotStatus_* _internal_add_status();
  public:
  const ::MetinGuestHost::BotStatus_& status(int index) const;
  ::MetinGuestHost::BotStatus_* add_status();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MetinGuestHost::BotStatus_ >&
      status() const;

  // @@protoc_insertion_point(class_scope:MetinGuestHost.BotStatusMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MetinGuestHost::BotStatus_ > status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MetinHostGuest_2eproto;
};
// -------------------------------------------------------------------

class RegisterBotInstanceMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MetinGuestHost.RegisterBotInstanceMessage) */ {
 public:
  inline RegisterBotInstanceMessage() : RegisterBotInstanceMessage(nullptr) {}
  virtual ~RegisterBotInstanceMessage();

  RegisterBotInstanceMessage(const RegisterBotInstanceMessage& from);
  RegisterBotInstanceMessage(RegisterBotInstanceMessage&& from) noexcept
    : RegisterBotInstanceMessage() {
    *this = ::std::move(from);
  }

  inline RegisterBotInstanceMessage& operator=(const RegisterBotInstanceMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegisterBotInstanceMessage& operator=(RegisterBotInstanceMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RegisterBotInstanceMessage& default_instance();

  static inline const RegisterBotInstanceMessage* internal_default_instance() {
    return reinterpret_cast<const RegisterBotInstanceMessage*>(
               &_RegisterBotInstanceMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(RegisterBotInstanceMessage& a, RegisterBotInstanceMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(RegisterBotInstanceMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegisterBotInstanceMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RegisterBotInstanceMessage* New() const final {
    return CreateMaybeMessage<RegisterBotInstanceMessage>(nullptr);
  }

  RegisterBotInstanceMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RegisterBotInstanceMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RegisterBotInstanceMessage& from);
  void MergeFrom(const RegisterBotInstanceMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisterBotInstanceMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MetinGuestHost.RegisterBotInstanceMessage";
  }
  protected:
  explicit RegisterBotInstanceMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MetinHostGuest_2eproto);
    return ::descriptor_table_MetinHostGuest_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBotFieldNumber = 1,
  };
  // repeated .MetinGuestHost.BotInstance_ bot = 1;
  int bot_size() const;
  private:
  int _internal_bot_size() const;
  public:
  void clear_bot();
  ::MetinGuestHost::BotInstance_* mutable_bot(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MetinGuestHost::BotInstance_ >*
      mutable_bot();
  private:
  const ::MetinGuestHost::BotInstance_& _internal_bot(int index) const;
  ::MetinGuestHost::BotInstance_* _internal_add_bot();
  public:
  const ::MetinGuestHost::BotInstance_& bot(int index) const;
  ::MetinGuestHost::BotInstance_* add_bot();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MetinGuestHost::BotInstance_ >&
      bot() const;

  // @@protoc_insertion_point(class_scope:MetinGuestHost.RegisterBotInstanceMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MetinGuestHost::BotInstance_ > bot_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MetinHostGuest_2eproto;
};
// -------------------------------------------------------------------

class RegisterVMInstanceMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MetinGuestHost.RegisterVMInstanceMessage) */ {
 public:
  inline RegisterVMInstanceMessage() : RegisterVMInstanceMessage(nullptr) {}
  virtual ~RegisterVMInstanceMessage();

  RegisterVMInstanceMessage(const RegisterVMInstanceMessage& from);
  RegisterVMInstanceMessage(RegisterVMInstanceMessage&& from) noexcept
    : RegisterVMInstanceMessage() {
    *this = ::std::move(from);
  }

  inline RegisterVMInstanceMessage& operator=(const RegisterVMInstanceMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegisterVMInstanceMessage& operator=(RegisterVMInstanceMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RegisterVMInstanceMessage& default_instance();

  static inline const RegisterVMInstanceMessage* internal_default_instance() {
    return reinterpret_cast<const RegisterVMInstanceMessage*>(
               &_RegisterVMInstanceMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(RegisterVMInstanceMessage& a, RegisterVMInstanceMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(RegisterVMInstanceMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegisterVMInstanceMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RegisterVMInstanceMessage* New() const final {
    return CreateMaybeMessage<RegisterVMInstanceMessage>(nullptr);
  }

  RegisterVMInstanceMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RegisterVMInstanceMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RegisterVMInstanceMessage& from);
  void MergeFrom(const RegisterVMInstanceMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisterVMInstanceMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MetinGuestHost.RegisterVMInstanceMessage";
  }
  protected:
  explicit RegisterVMInstanceMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MetinHostGuest_2eproto);
    return ::descriptor_table_MetinHostGuest_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVMNameFieldNumber = 1,
    kBotInstanceFieldNumber = 2,
  };
  // string VMName = 1;
  void clear_vmname();
  const std::string& vmname() const;
  void set_vmname(const std::string& value);
  void set_vmname(std::string&& value);
  void set_vmname(const char* value);
  void set_vmname(const char* value, size_t size);
  std::string* mutable_vmname();
  std::string* release_vmname();
  void set_allocated_vmname(std::string* vmname);
  private:
  const std::string& _internal_vmname() const;
  void _internal_set_vmname(const std::string& value);
  std::string* _internal_mutable_vmname();
  public:

  // .MetinGuestHost.RegisterBotInstanceMessage botInstance = 2;
  bool has_botinstance() const;
  private:
  bool _internal_has_botinstance() const;
  public:
  void clear_botinstance();
  const ::MetinGuestHost::RegisterBotInstanceMessage& botinstance() const;
  ::MetinGuestHost::RegisterBotInstanceMessage* release_botinstance();
  ::MetinGuestHost::RegisterBotInstanceMessage* mutable_botinstance();
  void set_allocated_botinstance(::MetinGuestHost::RegisterBotInstanceMessage* botinstance);
  private:
  const ::MetinGuestHost::RegisterBotInstanceMessage& _internal_botinstance() const;
  ::MetinGuestHost::RegisterBotInstanceMessage* _internal_mutable_botinstance();
  public:
  void unsafe_arena_set_allocated_botinstance(
      ::MetinGuestHost::RegisterBotInstanceMessage* botinstance);
  ::MetinGuestHost::RegisterBotInstanceMessage* unsafe_arena_release_botinstance();

  // @@protoc_insertion_point(class_scope:MetinGuestHost.RegisterVMInstanceMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vmname_;
  ::MetinGuestHost::RegisterBotInstanceMessage* botinstance_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MetinHostGuest_2eproto;
};
// -------------------------------------------------------------------

class UnregisterBotInstanceMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MetinGuestHost.UnregisterBotInstanceMessage) */ {
 public:
  inline UnregisterBotInstanceMessage() : UnregisterBotInstanceMessage(nullptr) {}
  virtual ~UnregisterBotInstanceMessage();

  UnregisterBotInstanceMessage(const UnregisterBotInstanceMessage& from);
  UnregisterBotInstanceMessage(UnregisterBotInstanceMessage&& from) noexcept
    : UnregisterBotInstanceMessage() {
    *this = ::std::move(from);
  }

  inline UnregisterBotInstanceMessage& operator=(const UnregisterBotInstanceMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnregisterBotInstanceMessage& operator=(UnregisterBotInstanceMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UnregisterBotInstanceMessage& default_instance();

  static inline const UnregisterBotInstanceMessage* internal_default_instance() {
    return reinterpret_cast<const UnregisterBotInstanceMessage*>(
               &_UnregisterBotInstanceMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(UnregisterBotInstanceMessage& a, UnregisterBotInstanceMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(UnregisterBotInstanceMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UnregisterBotInstanceMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UnregisterBotInstanceMessage* New() const final {
    return CreateMaybeMessage<UnregisterBotInstanceMessage>(nullptr);
  }

  UnregisterBotInstanceMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UnregisterBotInstanceMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UnregisterBotInstanceMessage& from);
  void MergeFrom(const UnregisterBotInstanceMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnregisterBotInstanceMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MetinGuestHost.UnregisterBotInstanceMessage";
  }
  protected:
  explicit UnregisterBotInstanceMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MetinHostGuest_2eproto);
    return ::descriptor_table_MetinHostGuest_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBotIdFieldNumber = 1,
  };
  // repeated uint32 botId = 1;
  int botid_size() const;
  private:
  int _internal_botid_size() const;
  public:
  void clear_botid();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_botid(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_botid() const;
  void _internal_add_botid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_botid();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 botid(int index) const;
  void set_botid(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_botid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      botid() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_botid();

  // @@protoc_insertion_point(class_scope:MetinGuestHost.UnregisterBotInstanceMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > botid_;
  mutable std::atomic<int> _botid_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MetinHostGuest_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PrivateMessage

// uint32 botId = 1;
inline void PrivateMessage::clear_botid() {
  botid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PrivateMessage::_internal_botid() const {
  return botid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PrivateMessage::botid() const {
  // @@protoc_insertion_point(field_get:MetinGuestHost.PrivateMessage.botId)
  return _internal_botid();
}
inline void PrivateMessage::_internal_set_botid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  botid_ = value;
}
inline void PrivateMessage::set_botid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_botid(value);
  // @@protoc_insertion_point(field_set:MetinGuestHost.PrivateMessage.botId)
}

// bytes targetNickname = 2;
inline void PrivateMessage::clear_targetnickname() {
  targetnickname_.ClearToEmpty();
}
inline const std::string& PrivateMessage::targetnickname() const {
  // @@protoc_insertion_point(field_get:MetinGuestHost.PrivateMessage.targetNickname)
  return _internal_targetnickname();
}
inline void PrivateMessage::set_targetnickname(const std::string& value) {
  _internal_set_targetnickname(value);
  // @@protoc_insertion_point(field_set:MetinGuestHost.PrivateMessage.targetNickname)
}
inline std::string* PrivateMessage::mutable_targetnickname() {
  // @@protoc_insertion_point(field_mutable:MetinGuestHost.PrivateMessage.targetNickname)
  return _internal_mutable_targetnickname();
}
inline const std::string& PrivateMessage::_internal_targetnickname() const {
  return targetnickname_.Get();
}
inline void PrivateMessage::_internal_set_targetnickname(const std::string& value) {
  
  targetnickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PrivateMessage::set_targetnickname(std::string&& value) {
  
  targetnickname_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:MetinGuestHost.PrivateMessage.targetNickname)
}
inline void PrivateMessage::set_targetnickname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  targetnickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:MetinGuestHost.PrivateMessage.targetNickname)
}
inline void PrivateMessage::set_targetnickname(const void* value,
    size_t size) {
  
  targetnickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:MetinGuestHost.PrivateMessage.targetNickname)
}
inline std::string* PrivateMessage::_internal_mutable_targetnickname() {
  
  return targetnickname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PrivateMessage::release_targetnickname() {
  // @@protoc_insertion_point(field_release:MetinGuestHost.PrivateMessage.targetNickname)
  return targetnickname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PrivateMessage::set_allocated_targetnickname(std::string* targetnickname) {
  if (targetnickname != nullptr) {
    
  } else {
    
  }
  targetnickname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), targetnickname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:MetinGuestHost.PrivateMessage.targetNickname)
}

// bytes textMessage = 3;
inline void PrivateMessage::clear_textmessage() {
  textmessage_.ClearToEmpty();
}
inline const std::string& PrivateMessage::textmessage() const {
  // @@protoc_insertion_point(field_get:MetinGuestHost.PrivateMessage.textMessage)
  return _internal_textmessage();
}
inline void PrivateMessage::set_textmessage(const std::string& value) {
  _internal_set_textmessage(value);
  // @@protoc_insertion_point(field_set:MetinGuestHost.PrivateMessage.textMessage)
}
inline std::string* PrivateMessage::mutable_textmessage() {
  // @@protoc_insertion_point(field_mutable:MetinGuestHost.PrivateMessage.textMessage)
  return _internal_mutable_textmessage();
}
inline const std::string& PrivateMessage::_internal_textmessage() const {
  return textmessage_.Get();
}
inline void PrivateMessage::_internal_set_textmessage(const std::string& value) {
  
  textmessage_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PrivateMessage::set_textmessage(std::string&& value) {
  
  textmessage_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:MetinGuestHost.PrivateMessage.textMessage)
}
inline void PrivateMessage::set_textmessage(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  textmessage_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:MetinGuestHost.PrivateMessage.textMessage)
}
inline void PrivateMessage::set_textmessage(const void* value,
    size_t size) {
  
  textmessage_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:MetinGuestHost.PrivateMessage.textMessage)
}
inline std::string* PrivateMessage::_internal_mutable_textmessage() {
  
  return textmessage_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PrivateMessage::release_textmessage() {
  // @@protoc_insertion_point(field_release:MetinGuestHost.PrivateMessage.textMessage)
  return textmessage_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PrivateMessage::set_allocated_textmessage(std::string* textmessage) {
  if (textmessage != nullptr) {
    
  } else {
    
  }
  textmessage_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), textmessage,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:MetinGuestHost.PrivateMessage.textMessage)
}

// -------------------------------------------------------------------

// BotStatus_

// uint32 botId = 1;
inline void BotStatus_::clear_botid() {
  botid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BotStatus_::_internal_botid() const {
  return botid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BotStatus_::botid() const {
  // @@protoc_insertion_point(field_get:MetinGuestHost.BotStatus_.botId)
  return _internal_botid();
}
inline void BotStatus_::_internal_set_botid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  botid_ = value;
}
inline void BotStatus_::set_botid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_botid(value);
  // @@protoc_insertion_point(field_set:MetinGuestHost.BotStatus_.botId)
}

// uint32 botStatus = 2;
inline void BotStatus_::clear_botstatus() {
  botstatus_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BotStatus_::_internal_botstatus() const {
  return botstatus_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BotStatus_::botstatus() const {
  // @@protoc_insertion_point(field_get:MetinGuestHost.BotStatus_.botStatus)
  return _internal_botstatus();
}
inline void BotStatus_::_internal_set_botstatus(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  botstatus_ = value;
}
inline void BotStatus_::set_botstatus(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_botstatus(value);
  // @@protoc_insertion_point(field_set:MetinGuestHost.BotStatus_.botStatus)
}

// -------------------------------------------------------------------

// BotInstance_

// uint32 botId = 1;
inline void BotInstance_::clear_botid() {
  botid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BotInstance_::_internal_botid() const {
  return botid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BotInstance_::botid() const {
  // @@protoc_insertion_point(field_get:MetinGuestHost.BotInstance_.botId)
  return _internal_botid();
}
inline void BotInstance_::_internal_set_botid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  botid_ = value;
}
inline void BotInstance_::set_botid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_botid(value);
  // @@protoc_insertion_point(field_set:MetinGuestHost.BotInstance_.botId)
}

// string botName = 2;
inline void BotInstance_::clear_botname() {
  botname_.ClearToEmpty();
}
inline const std::string& BotInstance_::botname() const {
  // @@protoc_insertion_point(field_get:MetinGuestHost.BotInstance_.botName)
  return _internal_botname();
}
inline void BotInstance_::set_botname(const std::string& value) {
  _internal_set_botname(value);
  // @@protoc_insertion_point(field_set:MetinGuestHost.BotInstance_.botName)
}
inline std::string* BotInstance_::mutable_botname() {
  // @@protoc_insertion_point(field_mutable:MetinGuestHost.BotInstance_.botName)
  return _internal_mutable_botname();
}
inline const std::string& BotInstance_::_internal_botname() const {
  return botname_.Get();
}
inline void BotInstance_::_internal_set_botname(const std::string& value) {
  
  botname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void BotInstance_::set_botname(std::string&& value) {
  
  botname_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:MetinGuestHost.BotInstance_.botName)
}
inline void BotInstance_::set_botname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  botname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:MetinGuestHost.BotInstance_.botName)
}
inline void BotInstance_::set_botname(const char* value,
    size_t size) {
  
  botname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:MetinGuestHost.BotInstance_.botName)
}
inline std::string* BotInstance_::_internal_mutable_botname() {
  
  return botname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* BotInstance_::release_botname() {
  // @@protoc_insertion_point(field_release:MetinGuestHost.BotInstance_.botName)
  return botname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BotInstance_::set_allocated_botname(std::string* botname) {
  if (botname != nullptr) {
    
  } else {
    
  }
  botname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), botname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:MetinGuestHost.BotInstance_.botName)
}

// -------------------------------------------------------------------

// BotStatusMessage

// repeated .MetinGuestHost.BotStatus_ status = 1;
inline int BotStatusMessage::_internal_status_size() const {
  return status_.size();
}
inline int BotStatusMessage::status_size() const {
  return _internal_status_size();
}
inline void BotStatusMessage::clear_status() {
  status_.Clear();
}
inline ::MetinGuestHost::BotStatus_* BotStatusMessage::mutable_status(int index) {
  // @@protoc_insertion_point(field_mutable:MetinGuestHost.BotStatusMessage.status)
  return status_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MetinGuestHost::BotStatus_ >*
BotStatusMessage::mutable_status() {
  // @@protoc_insertion_point(field_mutable_list:MetinGuestHost.BotStatusMessage.status)
  return &status_;
}
inline const ::MetinGuestHost::BotStatus_& BotStatusMessage::_internal_status(int index) const {
  return status_.Get(index);
}
inline const ::MetinGuestHost::BotStatus_& BotStatusMessage::status(int index) const {
  // @@protoc_insertion_point(field_get:MetinGuestHost.BotStatusMessage.status)
  return _internal_status(index);
}
inline ::MetinGuestHost::BotStatus_* BotStatusMessage::_internal_add_status() {
  return status_.Add();
}
inline ::MetinGuestHost::BotStatus_* BotStatusMessage::add_status() {
  // @@protoc_insertion_point(field_add:MetinGuestHost.BotStatusMessage.status)
  return _internal_add_status();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MetinGuestHost::BotStatus_ >&
BotStatusMessage::status() const {
  // @@protoc_insertion_point(field_list:MetinGuestHost.BotStatusMessage.status)
  return status_;
}

// -------------------------------------------------------------------

// RegisterBotInstanceMessage

// repeated .MetinGuestHost.BotInstance_ bot = 1;
inline int RegisterBotInstanceMessage::_internal_bot_size() const {
  return bot_.size();
}
inline int RegisterBotInstanceMessage::bot_size() const {
  return _internal_bot_size();
}
inline void RegisterBotInstanceMessage::clear_bot() {
  bot_.Clear();
}
inline ::MetinGuestHost::BotInstance_* RegisterBotInstanceMessage::mutable_bot(int index) {
  // @@protoc_insertion_point(field_mutable:MetinGuestHost.RegisterBotInstanceMessage.bot)
  return bot_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MetinGuestHost::BotInstance_ >*
RegisterBotInstanceMessage::mutable_bot() {
  // @@protoc_insertion_point(field_mutable_list:MetinGuestHost.RegisterBotInstanceMessage.bot)
  return &bot_;
}
inline const ::MetinGuestHost::BotInstance_& RegisterBotInstanceMessage::_internal_bot(int index) const {
  return bot_.Get(index);
}
inline const ::MetinGuestHost::BotInstance_& RegisterBotInstanceMessage::bot(int index) const {
  // @@protoc_insertion_point(field_get:MetinGuestHost.RegisterBotInstanceMessage.bot)
  return _internal_bot(index);
}
inline ::MetinGuestHost::BotInstance_* RegisterBotInstanceMessage::_internal_add_bot() {
  return bot_.Add();
}
inline ::MetinGuestHost::BotInstance_* RegisterBotInstanceMessage::add_bot() {
  // @@protoc_insertion_point(field_add:MetinGuestHost.RegisterBotInstanceMessage.bot)
  return _internal_add_bot();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MetinGuestHost::BotInstance_ >&
RegisterBotInstanceMessage::bot() const {
  // @@protoc_insertion_point(field_list:MetinGuestHost.RegisterBotInstanceMessage.bot)
  return bot_;
}

// -------------------------------------------------------------------

// RegisterVMInstanceMessage

// string VMName = 1;
inline void RegisterVMInstanceMessage::clear_vmname() {
  vmname_.ClearToEmpty();
}
inline const std::string& RegisterVMInstanceMessage::vmname() const {
  // @@protoc_insertion_point(field_get:MetinGuestHost.RegisterVMInstanceMessage.VMName)
  return _internal_vmname();
}
inline void RegisterVMInstanceMessage::set_vmname(const std::string& value) {
  _internal_set_vmname(value);
  // @@protoc_insertion_point(field_set:MetinGuestHost.RegisterVMInstanceMessage.VMName)
}
inline std::string* RegisterVMInstanceMessage::mutable_vmname() {
  // @@protoc_insertion_point(field_mutable:MetinGuestHost.RegisterVMInstanceMessage.VMName)
  return _internal_mutable_vmname();
}
inline const std::string& RegisterVMInstanceMessage::_internal_vmname() const {
  return vmname_.Get();
}
inline void RegisterVMInstanceMessage::_internal_set_vmname(const std::string& value) {
  
  vmname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RegisterVMInstanceMessage::set_vmname(std::string&& value) {
  
  vmname_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:MetinGuestHost.RegisterVMInstanceMessage.VMName)
}
inline void RegisterVMInstanceMessage::set_vmname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  vmname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:MetinGuestHost.RegisterVMInstanceMessage.VMName)
}
inline void RegisterVMInstanceMessage::set_vmname(const char* value,
    size_t size) {
  
  vmname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:MetinGuestHost.RegisterVMInstanceMessage.VMName)
}
inline std::string* RegisterVMInstanceMessage::_internal_mutable_vmname() {
  
  return vmname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RegisterVMInstanceMessage::release_vmname() {
  // @@protoc_insertion_point(field_release:MetinGuestHost.RegisterVMInstanceMessage.VMName)
  return vmname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RegisterVMInstanceMessage::set_allocated_vmname(std::string* vmname) {
  if (vmname != nullptr) {
    
  } else {
    
  }
  vmname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), vmname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:MetinGuestHost.RegisterVMInstanceMessage.VMName)
}

// .MetinGuestHost.RegisterBotInstanceMessage botInstance = 2;
inline bool RegisterVMInstanceMessage::_internal_has_botinstance() const {
  return this != internal_default_instance() && botinstance_ != nullptr;
}
inline bool RegisterVMInstanceMessage::has_botinstance() const {
  return _internal_has_botinstance();
}
inline void RegisterVMInstanceMessage::clear_botinstance() {
  if (GetArena() == nullptr && botinstance_ != nullptr) {
    delete botinstance_;
  }
  botinstance_ = nullptr;
}
inline const ::MetinGuestHost::RegisterBotInstanceMessage& RegisterVMInstanceMessage::_internal_botinstance() const {
  const ::MetinGuestHost::RegisterBotInstanceMessage* p = botinstance_;
  return p != nullptr ? *p : reinterpret_cast<const ::MetinGuestHost::RegisterBotInstanceMessage&>(
      ::MetinGuestHost::_RegisterBotInstanceMessage_default_instance_);
}
inline const ::MetinGuestHost::RegisterBotInstanceMessage& RegisterVMInstanceMessage::botinstance() const {
  // @@protoc_insertion_point(field_get:MetinGuestHost.RegisterVMInstanceMessage.botInstance)
  return _internal_botinstance();
}
inline void RegisterVMInstanceMessage::unsafe_arena_set_allocated_botinstance(
    ::MetinGuestHost::RegisterBotInstanceMessage* botinstance) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(botinstance_);
  }
  botinstance_ = botinstance;
  if (botinstance) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MetinGuestHost.RegisterVMInstanceMessage.botInstance)
}
inline ::MetinGuestHost::RegisterBotInstanceMessage* RegisterVMInstanceMessage::release_botinstance() {
  
  ::MetinGuestHost::RegisterBotInstanceMessage* temp = botinstance_;
  botinstance_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::MetinGuestHost::RegisterBotInstanceMessage* RegisterVMInstanceMessage::unsafe_arena_release_botinstance() {
  // @@protoc_insertion_point(field_release:MetinGuestHost.RegisterVMInstanceMessage.botInstance)
  
  ::MetinGuestHost::RegisterBotInstanceMessage* temp = botinstance_;
  botinstance_ = nullptr;
  return temp;
}
inline ::MetinGuestHost::RegisterBotInstanceMessage* RegisterVMInstanceMessage::_internal_mutable_botinstance() {
  
  if (botinstance_ == nullptr) {
    auto* p = CreateMaybeMessage<::MetinGuestHost::RegisterBotInstanceMessage>(GetArena());
    botinstance_ = p;
  }
  return botinstance_;
}
inline ::MetinGuestHost::RegisterBotInstanceMessage* RegisterVMInstanceMessage::mutable_botinstance() {
  // @@protoc_insertion_point(field_mutable:MetinGuestHost.RegisterVMInstanceMessage.botInstance)
  return _internal_mutable_botinstance();
}
inline void RegisterVMInstanceMessage::set_allocated_botinstance(::MetinGuestHost::RegisterBotInstanceMessage* botinstance) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete botinstance_;
  }
  if (botinstance) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(botinstance);
    if (message_arena != submessage_arena) {
      botinstance = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, botinstance, submessage_arena);
    }
    
  } else {
    
  }
  botinstance_ = botinstance;
  // @@protoc_insertion_point(field_set_allocated:MetinGuestHost.RegisterVMInstanceMessage.botInstance)
}

// -------------------------------------------------------------------

// UnregisterBotInstanceMessage

// repeated uint32 botId = 1;
inline int UnregisterBotInstanceMessage::_internal_botid_size() const {
  return botid_.size();
}
inline int UnregisterBotInstanceMessage::botid_size() const {
  return _internal_botid_size();
}
inline void UnregisterBotInstanceMessage::clear_botid() {
  botid_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UnregisterBotInstanceMessage::_internal_botid(int index) const {
  return botid_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UnregisterBotInstanceMessage::botid(int index) const {
  // @@protoc_insertion_point(field_get:MetinGuestHost.UnregisterBotInstanceMessage.botId)
  return _internal_botid(index);
}
inline void UnregisterBotInstanceMessage::set_botid(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  botid_.Set(index, value);
  // @@protoc_insertion_point(field_set:MetinGuestHost.UnregisterBotInstanceMessage.botId)
}
inline void UnregisterBotInstanceMessage::_internal_add_botid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  botid_.Add(value);
}
inline void UnregisterBotInstanceMessage::add_botid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_botid(value);
  // @@protoc_insertion_point(field_add:MetinGuestHost.UnregisterBotInstanceMessage.botId)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
UnregisterBotInstanceMessage::_internal_botid() const {
  return botid_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
UnregisterBotInstanceMessage::botid() const {
  // @@protoc_insertion_point(field_list:MetinGuestHost.UnregisterBotInstanceMessage.botId)
  return _internal_botid();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
UnregisterBotInstanceMessage::_internal_mutable_botid() {
  return &botid_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
UnregisterBotInstanceMessage::mutable_botid() {
  // @@protoc_insertion_point(field_mutable_list:MetinGuestHost.UnregisterBotInstanceMessage.botId)
  return _internal_mutable_botid();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace MetinGuestHost

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_MetinHostGuest_2eproto
